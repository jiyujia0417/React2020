{"version":3,"sources":["components/List.js","components/Input.js","components/TodoList.js","index.js"],"names":["List","this","props","arrFalse","length","renderTodo","arrTrue","Component","Input","ref","inp","input","value","inpValue","type","onChange","handleChange","onClick","addTodo","TodoList","e","setState","target","state","todos","title","done","alert","delTodo","idx","filter","item","index","toggle","newTodos","JSON","parse","stringify","map","checked","readOnly","dangerouslySetInnerHTML","__html","todo","localStorage","getItem","setItem","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"6KAEqBA,E,uKAEb,OAAO,6BACH,0CAAgBC,KAAKC,MAAMC,SAASC,QACpC,4BAAKH,KAAKC,MAAMG,YAAW,IAC3B,6CAAmBJ,KAAKC,MAAMI,QAAQF,QACtC,4BAAKH,KAAKC,MAAMG,YAAW,S,GANLE,aCAbC,E,uKACP,IAAD,OACL,OACI,6BACI,2BACIC,IAAK,SAAAC,GAAG,OAAI,EAAKC,MAAQD,GACzBE,MAAOX,KAAKC,MAAMW,SAClBC,KAAK,OACLC,SAAUd,KAAKC,MAAMc,eAEzB,4BAAQC,QAAShB,KAAKC,MAAMgB,SAA5B,Y,GAVmBX,aCEdY,E,kDACjB,aAAe,IAAD,8BACV,gBA0BJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAAER,SAAUO,EAAEE,OAAOV,SA5BzB,EAgCdM,QAAU,WACqB,IAAvB,EAAKK,MAAMV,SAIX,EAAKQ,SAAS,CACVG,MAAM,CACF,CACIC,MAAO,EAAKF,MAAMV,SAClBa,MAAM,IAHT,mBAME,EAAKH,MAAMC,QAElBX,SAAU,KAZdc,MAAM,wCAlCA,EAoDdC,QAAU,SAACC,GACP,EAAKR,SAAS,CAEVG,MAAO,EAAKD,MAAMC,MAAMM,QAAO,SAACC,EAAMC,GAAP,OAAiBA,GAASH,QAvDnD,EA4DdI,OAAS,SAACJ,GACN,IAAIK,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKd,MAAMC,QACpDU,EAASL,GAAKH,MAAQQ,EAASL,GAAKH,KACpC,EAAKL,SAAS,CAAEG,MAAOU,KA/Db,EAkEd7B,WAAa,SAACqB,GACV,OAAO,EAAKH,MAAMC,MAAMc,KAAI,SAACP,EAAMC,GAC/B,GAAID,EAAKL,MAAQA,EACb,OACI,4BACI,2BACIT,QAAS,kBAAM,EAAKgB,OAAOD,IAC3BO,QAASb,EAETZ,KAAK,WACL0B,UAAU,IAEd,0BAAMC,wBAAyB,CAAEC,OAAQX,EAAKN,SAC9C,4BAAQR,QAAS,kBAAM,EAAKW,QAAQI,KAApC,YA7EhB,EAAKT,MAAQ,CAETV,SAAU,GAEVW,MAAO,IAND,E,gEAWV,IAAImB,EAAOC,aAAaC,QAAQ,SAC5BF,GACA1C,KAAKoB,SAAS,CACVG,MAAOW,KAAKC,MAAMO,O,2CAO1BC,aAAaE,QACT,QACAX,KAAKE,UAAUpC,KAAKsB,MAAMC,U,+BA+DzB,MAEuBvB,KAAKsB,MAAzBV,EAFH,EAEGA,SAAUW,EAFb,EAEaA,MAGdrB,EAAWqB,EAAMM,QAAO,SAAAC,GAAI,OAAKA,EAAKL,QACtCpB,EAAUkB,EAAMM,QAAO,SAAAC,GAAI,OAAIA,EAAKL,QAExC,OAAO,6BACH,2BAAOqB,QAAQ,OAAM,0CACrB,kBAAC,EAAD,CAAOlC,SAAUA,EAAUK,QAASjB,KAAKiB,QAASF,aAAcf,KAAKe,eACrE,kBAAC,EAAD,CAAMb,SAAUA,EAAUG,QAASA,EAASD,WAAYJ,KAAKI,WAAYmB,MAAOA,EAAOI,QAAS3B,KAAK2B,QAASK,OAAQhC,KAAKgC,c,GAlGjG1B,aCAtCyC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f3b34249.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n    render() {\r\n        return <div>\r\n            <h3>doing now: {this.props.arrFalse.length}</h3>\r\n            <ul>{this.props.renderTodo(false)}</ul>\r\n            <h3>already done: {this.props.arrTrue.length}</h3>\r\n            <ul>{this.props.renderTodo(true)}</ul>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    ref={inp => this.input = inp}\r\n                    value={this.props.inpValue}\r\n                    type=\"text\"\r\n                    onChange={this.props.handleChange}\r\n                ></input>\r\n                <button onClick={this.props.addTodo}>add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport List from '../components/List';\r\nimport Input from '../components/Input';\r\n\r\nexport default class TodoList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            //输入框里的值，初始值为空\r\n            inpValue: '',\r\n            //下面的todo列表\r\n            todos: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let todo = localStorage.getItem('todos');\r\n        if (todo) {\r\n            this.setState({\r\n                todos: JSON.parse(todo)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //每一次更新都缓存一次值\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ inpValue: e.target.value })\r\n    }\r\n\r\n    //添加一项\r\n    addTodo = () => {\r\n        if (this.state.inpValue == '') {\r\n            alert(\"Please do not fill in empty values!\");\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                todos: [\r\n                    {\r\n                        title: this.state.inpValue,\r\n                        done: false\r\n                    },\r\n                    //使用拓展运算符将之前的todos放进来\r\n                    ...this.state.todos\r\n                ],\r\n                inpValue: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    //删除对应的一项\r\n    delTodo = (idx) => {\r\n        this.setState({\r\n            //把除了这一项之外剩下的拿出来\r\n            todos: this.state.todos.filter((item, index) => index != idx)\r\n        })\r\n    }\r\n\r\n    //checkbox上点击对勾，已经完成；没有对勾，还未完成\r\n    toggle = (idx) => {\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[idx].done = !newTodos[idx].done;\r\n        this.setState({ todos: newTodos });\r\n    }\r\n\r\n    renderTodo = (done) => {\r\n        return this.state.todos.map((item, index) => {\r\n            if (item.done == done) {\r\n                return (\r\n                    <li>\r\n                        <input\r\n                            onClick={() => this.toggle(index)}\r\n                            checked={done}\r\n                            //使用checked来选择是否勾选对勾，为真的勾上，为假的不勾\r\n                            type=\"checkbox\"\r\n                            readOnly={true}\r\n                        />\r\n                        <span dangerouslySetInnerHTML={{ __html: item.title }}></span>\r\n                        <button onClick={() => this.delTodo(index)}>del</button>\r\n                    </li>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //解构\r\n        const { inpValue, todos } = this.state;\r\n\r\n        //写两个数组以done的值来区分，done为false的数组处于“doing now”列；done为true的数组处于“already done”列\r\n        let arrFalse = todos.filter(item => !item.done);\r\n        let arrTrue = todos.filter(item => item.done);\r\n\r\n        return <div>\r\n            <label htmlFor=\"inp\"><h2>TodoList </h2></label>\r\n            <Input inpValue={inpValue} addTodo={this.addTodo} handleChange={this.handleChange} />\r\n            <List arrFalse={arrFalse} arrTrue={arrTrue} renderTodo={this.renderTodo} todos={todos} delTodo={this.delTodo} toggle={this.toggle} />\r\n        </div>\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './components/TodoList'\n\nReactDOM.render(\n    <TodoList />,\n    document.getElementById('root')\n);"],"sourceRoot":""}